Code 3 ML: Bank

# 1. Import Required Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# 2. Read the Dataset
data = pd.read_csv('/path/to/Churn_Modelling.csv')  # replace with the actual path

# 3. Prepare Features (X) and Target (y) and Split the Data
X = data.drop(columns=['Exited', 'RowNumber', 'CustomerId', 'Surname'])  # Drop unnecessary columns
y = data['Exited']  # Target variable

# One-hot encode categorical variables ('Geography', 'Gender')
X = pd.get_dummies(X, drop_first=True)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Normalize the Train and Test Data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 5. Build and Initialize the Model
model = Sequential()
model.add(Dense(32, activation='relu', input_shape=(X_train.shape[1],)))  # Input layer
model.add(Dense(16, activation='relu'))  # Hidden layer
model.add(Dense(1, activation='sigmoid'))  # Output layer for binary classification

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=10, validation_split=0.2)

# 6. Evaluate the Model
y_pred = (model.predict(X_test) > 0.5).astype(int)  # Predict classes based on a 0.5 threshold
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

# Print the Results
print(f'Accuracy: {accuracy * 100:.2f}%')
print('Confusion Matrix:')
print(conf_matrix)