Code 1 ML: Uber Prediction

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('path/to/uber_fares.csv')

# Data Preprocessing
data.dropna(inplace=True)  # Drop missing values
data['pickup_datetime'] = pd.to_datetime(data['pickup_datetime'], errors='coerce')
data['hour'] = data['pickup_datetime'].dt.hour
data['day_of_week'] = data['pickup_datetime'].dt.dayofweek
data = data[data['fare_amount'] > 0]  # Keep only positive fares

# Remove outliers in 'fare_amount' using Z-score
data = data[(np.abs((data['fare_amount'] - data['fare_amount'].mean()) / data['fare_amount'].std()) < 3)]

# Feature Selection and Splitting Data
X = data[['pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'hour', 'day_of_week']]
y = data['fare_amount']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression Model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
y_pred_lr = linear_model.predict(X_test)

# Random Forest Model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# Evaluation
rmse_lr = mean_squared_error(y_test, y_pred_lr, squared=False)
r2_lr = r2_score(y_test, y_pred_lr)

rmse_rf = mean_squared_error(y_test, y_pred_rf, squared=False)
r2_rf = r2_score(y_test, y_pred_rf)

print(f"Linear Regression RMSE: {rmse_lr}, R2: {r2_lr}")
print(f"Random Forest RMSE: {rmse_rf}, R2: {r2_rf}")

# Optional: Comparison Plot
plt.bar(['Linear Regression', 'Random Forest'], [rmse_lr, rmse_rf])
plt.ylabel('RMSE')
plt.show()